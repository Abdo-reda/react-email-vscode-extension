{
  "name": "react-email-renderer",
  "displayName": "React Email Renderer",
  "publisher": "AbdoReda",
  "description": "Preview your React emails instantly.",
  "version": "0.6.8",
  "icon": "assets/logo.png",
  "repository": {
    "type": "git",
    "url": "https://github.com/Abdo-reda/react-email-vscode-extension"
  },
  "engines": {
    "vscode": "^1.95.0"
  },
  "categories": [
    "Programming Languages",
    "Other"
  ],
  "keywords": [
    "react",
    "email",
    "live",
    "renderer",
    "previewer"
  ],
  "license": "SEE LICENSE IN LICENSE",
  "activationEvents": [
    "onLanguage:javascriptreact",
    "onLanguage:typescriptreact"
  ],
  "main": "./out/extension.js",
  "contributes": {
    "icons": {
      "react-email": {
        "description": "React Email Default Icon",
        "default": {
          "fontPath": "./assets/extensionIcons.woff",
          "fontCharacter": "\\E001"
        }
      }
    },
    "menus": {
      "editor/title": [
        {
          "command": "react-email-renderer.preview",
          "when": "editorLangId == typescriptreact || editorLangId == javascriptreact",
          "group": "navigation"
        }
      ]
    },
    "commands": [
      {
        "command": "react-email-renderer.preview",
        "title": "React Email Renderer: Preview Email",
        "icon": "$(react-email)"
      },
      {
        "command": "react-email-renderer.selectPackageVersion",
        "title": "React Email Renderer: Update Package Version Configuration",
        "icon": "$(versions)"
      },
      {
        "command": "react-email-renderer.toggleRenderTerminal",
        "title": "React Email Renderer: Show and Hide The Render Terminal",
        "icon": "$(terminal-view-icon)"
      },
      {
        "command": "react-email-renderer.restartRenderProcess",
        "title": "React Email Renderer: Restart the Render Process if its Running",
        "icon": "$(debug-restart)"
      },
      {
        "command": "react-email-renderer.stopRenderProcess",
        "title": "React Email Renderer: Stop the Render Process if its Running",
        "icon": "$(debug-stop)"
      }
    ],
    "configuration": {
      "title": "React Email Renderer",
      "properties": {
        "react-email-renderer.renderApproach": {
          "type": "string",
          "enum": [
            "server",
            "script"
          ],
          "markdownEnumDescriptions": [
            "`server` uses a vite server with a minimal react application to render the email.",
            "`script` executes a script using [tsx](https://tsx.is/) to render the email."
          ],
          "default": "server",
          "order": 0,
          "markdownDescription": "The Approach used to render the email."
        },
        "react-email-renderer.dependencies": {
          "type": "string",
          "enum": [
            "external"
          ],
          "markdownEnumDescriptions": [
            "`external` sets up an exteranl project used to render all emails. Has the Advantage that dependencies do not need to be installed in the current project."
          ],
          "default": "external",
          "order": 0,
          "markdownDescription": "Which dependencies will be used to render the email. Currently, only `external` option is allowed. Later, a `local` option that uses the active project dependencies would be supported. [Reference](https://react.email/docs/getting-started/manual-setup#2-install-dependencies)"
        },
        "react-email-renderer.runtimeEnviornment": {
          "type": "string",
          "enum": [
            "node"
          ],
          "default": "node",
          "order": 0,
          "markdownDescription": "The Runtime Enviornment Used to execute scripts. Currently only node is supported. Later, support for deno, bun will be added."
        },
        "react-email-renderer.packageManager": {
          "type": "string",
          "enum": [
            "npm"
          ],
          "default": "npm",
          "order": 0,
          "markdownDescription": "The Package Manager Used to install and run Dependencies. Currently only npm is supported. Later, support for yarn, pnpm, bun will be added."
        },
        "react-email-renderer.renderOn": {
          "type": "string",
          "enum": [
            "OnSave",
            "OnChange"
          ],
          "markdownEnumDescriptions": [
            "`OnSave` will refresh the email preview only when the active file is saved.",
            "`OnChange` will refresh the email preview on any change detected to the active file."
          ],
          "default": "OnSave",
          "order": 0,
          "markdownDescription": "When should the email be rerendered and updated."
        },
        "react-email-renderer.packages.directory": {
          "type": "string",
          "format": "uri",
          "default": "extensionUri:",
          "order": 1,
          "markdownDescription": "The path for the external project that will be used to render the email. By default the `extensionUri:` - The uri of the directory containing the extension - is used.  \n  \nCommonly located at  \n- windows: `C:\\Users\\<Username>\\.vscode\\extensions\\<extension-name-version>\\`.\n - mac: `~/.vscode/extensions/<extension-name-version>/`.\n - linux: `~/.vscode/extensions/<extension-name-version>/`.  \n   \n_This setting is ignored if `#react-email-renderer.dependencies#` is set to `local`._ "
        },
        "react-email-renderer.packages.reactEmailRenderVersion": {
          "type": "string",
          "pattern": "(^latest$)|^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$",
          "patternErrorMessage": "The value must match the SemVer pattern 'x.x.x' or the Value 'latest'.",
          "default": "latest",
          "order": 1,
          "markdownDescription": "The [version](https://www.npmjs.com/package/@react-email/render?activeTab=versions) of `@react-email/render` used.  \nThe command `react-email-renderer.selectPackageVersion` can be used to help selecting a valid version.  \n  \n_This setting is ignored if `#react-email-renderer.dependencies#` is set to `local`._"
        },
        "react-email-renderer.packages.reactEmailComponentsVersion": {
          "type": "string",
          "pattern": "(^latest$)|^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$",
          "patternErrorMessage": "The value must match the SemVer pattern 'x.x.x' or the Value 'latest'.",
          "default": "latest",
          "order": 1,
          "markdownDescription": "The [version](https://www.npmjs.com/package/@react-email/components?activeTab=versions) of `@react-email/components` used.  \nThe command `react-email-renderer.selectPackageVersion` can be used to help selecting a valid version.  \n  \n_This setting is ignored if `#react-email-renderer.dependencies#` is set to `local`._"
        },
        "react-email-renderer.packages.reactVersion": {
          "type": "string",
          "pattern": "(^latest$)|^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$",
          "patternErrorMessage": "The value must match the SemVer pattern 'x.x.x' or the Value 'latest'.",
          "default": "latest",
          "order": 1,
          "markdownDescription": "The [version](https://www.npmjs.com/package/react?activeTab=versions) of `react` used.  \nThe command `react-email-renderer.selectPackageVersion` can be used to help selecting a valid version.  \n  \n_This setting is ignored if `#react-email.dependencies#` is set to `local`._"
        },
        "react-email-renderer.packages.reactDomVersion": {
          "type": "string",
          "pattern": "(^latest$)|^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$",
          "patternErrorMessage": "The value must match the SemVer pattern 'x.x.x' or the Value 'latest'.",
          "default": "latest",
          "order": 1,
          "markdownDescription": "The [version](https://www.npmjs.com/package/react-dom?activeTab=versions) of `react-dom` used.  \nThe command `react-email-renderer.selectPackageVersion` can be used to help selecting a valid version.  \n  \n_This setting is ignored if `#react-email-renderer.dependencies#` is set to `local`._"
        },
        "react-email-renderer.server.port": {
          "type": "number",
          "default": 7777,
          "order": 2,
          "maximum": 65535,
          "minimum": 0,
          "markdownDescription": "The Port that the Live Render Server will run on. Make sure that the port is not reserved, assigned or in use for the extension to work.  \n  \n_This setting is ignored if `#react-email-renderer.renderApproach#` is set to `script`._"
        },
        "react-email-renderer.server.terminalVisible": {
          "type": "boolean",
          "default": false,
          "order": 2,
          "markdownDescription": "Controls the visiblity behaviour of the server terminal when rendering. By default, the terminal is hidden and can be shown by clicking on the status bar icon or running the `react-email-renderer.toggleRenderTerminal` command."
        },
        "react-email-renderer.server.terminalColor": {
          "type": "string",
          "enum": [
            "terminal.ansiBrightBlack",
            "terminal.ansiBrightBlue",
            "terminal.ansiBrightCyan",
            "terminal.ansiBrightGreen",
            "terminal.ansiBrightMagenta",
            "terminal.ansiBrightRed",
            "terminal.ansiBrightWhite",
            "terminal.ansiBrightYellow",
            "terminal.ansiBlack",
            "terminal.ansiBlue",
            "terminal.ansiCyan",
            "terminal.ansiGreen",
            "terminal.ansiMagenta",
            "terminal.ansiRed",
            "terminal.ansiWhite",
            "terminal.ansiYellow"
          ],
          "enumDescriptions": [
            "BrightBlack ANSI color.",
            "BrightBlue ANSI color.",
            "BrightCyan ANSI color.",
            "BrightGreen ANSI color.",
            "BrightMagenta ANSI color.",
            "BrightRed ANSI color.",
            "BrightWhite ANSI color.",
            "BrightYellow ANSI color.",
            "Black ANSI color.",
            "Blue ANSI color.",
            "Cyan ANSI color.",
            "Green ANSI color.",
            "Magenta ANSI color.",
            "Red ANSI color.",
            "White ANSI color.",
            "Yellow ANSI color."
          ],
          "default": "terminal.ansiCyan",
          "order": 2,
          "markdownDescription": "The Color of the Render Server Terminal. This affects nothing and is only for cosmetic purposes. The choice is limited to vscode built-in colors."
        }
      }
    }
  },
  "scripts": {
    "build": "tsc --build",
    "watch": "tsc --build --watch",
    "pretest": "npm run compile && npm run lint",
    "lint": "eslint src",
    "test": "vscode-test",
    "package": "mkdir -p build && vsce package --out build/",
    "publish": "vsce publish"
  },
  "devDependencies": {
    "@types/mocha": "^10.0.9",
    "@types/node": "20.x",
    "@types/vscode": "^1.95.0",
    "@typescript-eslint/eslint-plugin": "^8.10.0",
    "@typescript-eslint/parser": "^8.7.0",
    "@vscode/test-cli": "^0.0.10",
    "@vscode/test-electron": "^2.4.1",
    "@vscode/vsce": "^3.2.1",
    "eslint": "^9.13.0",
    "typescript": "^5.6.3"
  },
  "dependencies": {
    "@vscode/codicons": "^0.0.36"
  }
}
